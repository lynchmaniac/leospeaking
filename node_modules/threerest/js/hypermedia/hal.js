"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _halFlux = require("./halFlux");

var _halFlux2 = _interopRequireDefault(_halFlux);

var _halPaginateFlux = require("./halPaginateFlux");

var _halPaginateFlux2 = _interopRequireDefault(_halPaginateFlux);

var _pagination = require("../services/pagination");

var _pagination2 = _interopRequireDefault(_pagination);

var _paginationData = require("../services/paginationData");

var _paginationData2 = _interopRequireDefault(_paginationData);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var pathToRegexp = require("path-to-regexp");

/**
* Hal decorators
* @class
*/

var Hal = function () {
  function Hal() {
    _classCallCheck(this, Hal);
  }

  _createClass(Hal, null, [{
    key: "halServiceMethod",

    /**
     * Add a link on the result object. It represent the
     * state of the application. We used hal spec to represent this state.
     * The decorator is add on a method service.
     *
     * @method
     * @param {boolean} bPaginate - activate le hal pagination metadata
     * @returns {json} the result with the hal links
     */
    value: function halServiceMethod(pagination) {
      return function decorate(target, key, descriptor) {
        var oldFunct = descriptor.value;
        var paginateObject = undefined;

        if (pagination) {
          if (typeof pagination === "boolean") {
            paginateObject = {};
          } else if ((typeof pagination === "undefined" ? "undefined" : _typeof(pagination)) === "object") {
            paginateObject = pagination;
          }
        }

        descriptor.value = function () {
          var _this = this,
              _arguments = arguments;

          var p = new Promise(function (resolve) {
            resolve(true);
          });
          p = p.then(function () {
            return oldFunct.apply(_this, _arguments);
          });

          if (paginateObject) {
            // if paginate, extract the page and create hal paginate flux
            p = p.then(function (resultFct) {
              if (Array.isArray(resultFct)) {
                var currentQuery = _arguments[1].query || _arguments[0].query;
                var paginationData = _pagination2.default.extractPaginationData(currentQuery, paginateObject.pageSize, paginateObject.pageIdx, paginateObject.startIdx);
                paginationData.length = resultFct.length;
                var dataPage = _pagination2.default.managePagination(resultFct, paginationData.pageSize, paginationData.pageIdx, paginationData.startIdx);
                return new _halPaginateFlux2.default(dataPage, paginationData);
              }
              return new _halFlux2.default(resultFct);
            });
          } else {
            // if no paginate, create hal flux
            p = p.then(function (resultFct) {
              return new _halFlux2.default(resultFct);
            });
          }

          p = p.then(function (halFlux) {
            // add hal metadata for all hal entity
            var queryParams = _arguments[1].params || _arguments[0].params || {};
            if (Array.isArray(halFlux.data)) {
              halFlux.data.forEach(function (elt, index) {
                if (elt.halLink) {
                  _halFlux2.default.decorateSimpleObject(elt, queryParams);
                }
              });
            } else {
              _halFlux2.default.decorateSimpleObject(halFlux, queryParams);
            }
            return halFlux;
          }).then(function (halFlux) {
            // update link for all flux type
            var currentRequest = _arguments[1] || _arguments[0];
            halFlux.updateLinks(_arguments[0].originalUrl || _arguments[1].originalUrl, _arguments[0].baseUrl || _arguments[1].baseUrl);
            delete halFlux["paginationData"];
            return halFlux;
          });

          return p;
        };

        if (oldFunct.convertBefore) {
          descriptor.value.convertBefore = oldFunct.convertBefore;
        }
      };
    }

    /**
     * Add a link on the result object. It represent the
     * state of the application. We used hal spec to represent this state.
     * The decorator is add on a entity.
     *
     * @method
     * @param {string} link - the link.
     * @param {string} paramName - the link parameter name to replace bi the id.
     * @returns {function} the decorator
     */

  }, {
    key: "halEntity",
    value: function halEntity(link, paramName) {
      return function decorate(target) {
        if (!target.halLink) {
          target.pathToRegexp = pathToRegexp.compile(link);
          target.prototype.halLink = function (requestParameters) {
            var params = requestParameters || {};
            var paramId = paramName || "id";
            params[paramId] = this.halRessourceId();
            requestParameters[paramId] = this.halRessourceId();
            return target.pathToRegexp(params);
          };
        }
      };
    }

    /**
     * Mark the id for HAL entity.
     *
     * @method
     * @returns {function} the decorator
     */

  }, {
    key: "resourceId",
    value: function resourceId() {
      return function decorate(target, key, descriptor) {
        if (!target.halRessourceId) {
          target.halRessourceId = function () {
            return this[key];
          };
        }
      };
    }
  }]);

  return Hal;
}();

exports.default = Hal;