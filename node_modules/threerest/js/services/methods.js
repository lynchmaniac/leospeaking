"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _service = require("../service");

var _service2 = _interopRequireDefault(_service);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Classe for all verbs HTTP decorator.
* @class
*/
var Method = (_temp = _class = function () {
  function Method() {
    _classCallCheck(this, Method);
  }

  _createClass(Method, null, [{
    key: "get",


    /**
    * Decorator for 'GET' method.
    * @method
    * @param {string} path - path for Rest service.
    */
    value: function get(path) {
      return function (target, key, descriptor) {
        applyOnFunction(target, key, descriptor, "get", path);
      };
    }

    /**
    * Decorator for 'POST' method.
    * @method
    * @param {string} path - path for Rest service.
    */

  }, {
    key: "post",
    value: function post(path) {
      return function (target, key, descriptor) {
        applyOnFunction(target, key, descriptor, "post", path);
      };
    }

    /**
    * Decorator for 'PUT' method.
    * @method
    * @param {string} path - path for Rest service.
    */

  }, {
    key: "put",
    value: function put(path) {
      return function (target, key, descriptor) {
        applyOnFunction(target, key, descriptor, "put", path);
      };
    }

    /**
    * Decorator for 'DELETE' method.
    * @method
    * @param {string} path - path for Rest service.
    */

  }, {
    key: "delete",
    value: function _delete(path) {
      return function (target, key, descriptor) {
        applyOnFunction(target, key, descriptor, "delete", path);
      };
    }

    /**
    * Decorator for 'PATCH' method.
    * @method
    * @param {string} path - path for Rest service.
    */

  }, {
    key: "patch",
    value: function patch(path) {
      return function (target, key, descriptor) {
        applyOnFunction(target, key, descriptor, "patch", path);
      };
    }
  }]);

  return Method;
}(), _class.METHODS = {
  get: true,
  post: true,
  delete: true,
  put: true,
  patch: true
}, _temp);
exports.default = Method;
;

/**
* Add REST decorator on function.
* @method
* @param {Object|function} target - instance to decorate.
* @param {string} key - attribute name.
* @param {Object} descriptor - property descriptor.
* @param {string} methodName - HTTP method name.
* @param {string} path - Url for REST service.
*/
function applyOnFunction(target, key, descriptor, methodName, path) {

  var methodHttp = methodName;
  if (!target[_service2.default.globalKey]) {
    target[_service2.default.globalKey] = {};
  }
  if (!target[_service2.default.globalKey][methodHttp]) {
    target[_service2.default.globalKey][methodHttp] = {};
  };
  target[_service2.default.globalKey][methodHttp][key] = {};
  target[_service2.default.globalKey][methodHttp][key][_service2.default.pathKey] = path;
  target[_service2.default.globalKey][methodHttp][key][_service2.default.fctKey] = descriptor.value;
};