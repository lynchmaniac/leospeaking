"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _arrayHelper = require("../helpers/arrayHelper");

var _arrayHelper2 = _interopRequireDefault(_arrayHelper);

var _paginationData = require("./paginationData");

var _paginationData2 = _interopRequireDefault(_paginationData);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Pagination = function () {
  function Pagination() {
    _classCallCheck(this, Pagination);
  }

  _createClass(Pagination, null, [{
    key: "paginate",


    /**
     * Orchester pagination based on keywords parameter.
     *
     * @method
     * @param {String} [pageSize] - The keyword for pageSize. It can be null.
     * @param {String} [pageIdx] - The keyword for pageIdx. It can be null.
     * @returns {json} the result with pagination
     */
    value: function paginate(pageSize, pageIdx) {
      return function decorate(target, key, descriptor) {
        var oldFunct = descriptor.value;

        descriptor.value = function () {
          var _this = this,
              _arguments = arguments;

          var p = new Promise(function (resolve) {
            resolve(true);
          });
          p = p.then(function () {
            return oldFunct.apply(_this, _arguments);
          }).then(function (array) {
            var currentQuery = _arguments[0].query || _arguments[1].query;
            var paginationData = Pagination.extractPaginationData(currentQuery, pageSize, pageIdx);
            return Pagination.managePagination(array, paginationData.pageSize, paginationData.pageIdx);
          });
          return p;
        };

        if (oldFunct.convertBefore) {
          descriptor.value.convertBefore = oldFunct.convertBefore;
        }
      };
    }

    /**
     * Manage if pagination is neeccessary or not.
     * If there are pagination, the keywords for the pageSize and the
     * pageIdx must be set.
     * Then the result is slicing by this two params.
     *
     * @method
     * @param {Array} result - The result from the service.
     * @param {String} [pageSize=result.length] - the page size.
     * @param {String} [pageIdx=0] - the index of the page to extract.
     * @param {String} [startIdx=0] - the index of the object to start ectract.
     * @returns {Array}
     */

  }, {
    key: "managePagination",
    value: function managePagination(result, pageSize) {
      var pageIdx = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
      var startIdx = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];

      if (result) {
        result = _arrayHelper2.default.paginatesList(result, pageSize || result.length, pageIdx, startIdx);
      }
      return result;
    }

    /**
     * Extract paginatino data from request.
     *
     * @method
     * @param {object} query - The query to the service.
     * @param {String} [pageSizeKeyWord=pageSize] - The keyword for pageSize. It can be null.
     * @param {String} [pageIdxKeyWord=pageIdx] - The keyword for pageIdx. It can be null.
     * @returns {PaginationData}
     */

  }, {
    key: "extractPaginationData",
    value: function extractPaginationData(query) {
      var pageSizeKeyWord = arguments.length <= 1 || arguments[1] === undefined ? "pageSize" : arguments[1];
      var pageIdxKeyWord = arguments.length <= 2 || arguments[2] === undefined ? "pageIdx" : arguments[2];
      var startIdxKeyWord = arguments.length <= 3 || arguments[3] === undefined ? "startIdx" : arguments[3];


      if (query) {
        return new _paginationData2.default(pageIdxKeyWord, pageSizeKeyWord, startIdxKeyWord, query[pageIdxKeyWord], query[pageSizeKeyWord], query[startIdxKeyWord]);
      }
      return undefined;
    }
  }]);

  return Pagination;
}();

exports.default = Pagination;