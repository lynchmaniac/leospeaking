"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PaginationData = function () {
  function PaginationData(pageIdxKeyWord, pageSizeKeyWord, startIdxKeyWord) {
    var pageIdx = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];
    var pageSize = arguments.length <= 4 || arguments[4] === undefined ? 0 : arguments[4];
    var startIdx = arguments.length <= 5 || arguments[5] === undefined ? 0 : arguments[5];
    var length = arguments.length <= 6 || arguments[6] === undefined ? 0 : arguments[6];

    _classCallCheck(this, PaginationData);

    this.startIdx = parseInt(startIdx);
    this.pageIdx = parseInt(pageIdx);
    this.pageSize = parseInt(pageSize);
    this.pageIdxKeyWord = pageIdxKeyWord;
    this.pageSizeKeyWord = pageSizeKeyWord;
    this.startIdxKeyWord = startIdxKeyWord;
    this.length = parseInt(length);

    if (pageSize < 0) {
      throw new RangeError("pageSize must be greater or equal than zÃ©ro.");
    }
  }

  _createClass(PaginationData, [{
    key: "getPageMetadata",
    value: function getPageMetadata() {
      var metaData = {};

      if (this.pageSize == 0) {
        this.pageSize = this.length;
      }

      metaData.nextIdx = this.pageIdx + 1;
      metaData.prevIdx = this.pageIdx - 1;

      if (this.prevIdx < 0) {
        metaData.prevIdx = undefined;
      }

      if (this.nextPage > this.length) {
        metaData.nextIdx = undefined;
      }

      metaData.lastPage = Math.trunc(this.length / this.pageSize);
      if (this.length % this.pageSize == 0) {
        metaData.lastPage++;
      }
      metaData.pageSize = this.pageSize;
      metaData.pageIdxKeyWord = this.pageIdxKeyWord;
      metaData.pageSizeKeyWord = this.pageSizeKeyWord;
      metaData.startIdxKeyWord = this.startIdxKeyWord;
      return metaData;
    }
  }]);

  return PaginationData;
}();

exports.default = PaginationData;