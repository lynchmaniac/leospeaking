"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ArrayHelper = function () {
  function ArrayHelper() {
    _classCallCheck(this, ArrayHelper);
  }

  _createClass(ArrayHelper, null, [{
    key: "paginatesList",


    /**
     * Slice or not the result list.
     * The value of limit and/or offset determine how we can
     *
     * @method
     * @param {Array} result - The Array for extact.
     * @param {String} limit - The number of element to extract.
     * @param {String} offset - The index of the page to extract.
     * @param {String} startIdx - the index of the object to start extract.
     * @returns {Array}
     */
    value: function paginatesList(result, limit, offset, startIdx) {
      var tmpArray = result;

      if (startIdx) {
        tmpArray = tmpArray.slice(startIdx);
      }

      if (limit && offset) {
        tmpArray = tmpArray.slice(offset * limit, offset * limit + limit);
      } else if (limit) {
        tmpArray = tmpArray.slice(0, limit);
      }

      return tmpArray;
    }
  }]);

  return ArrayHelper;
}();

exports.default = ArrayHelper;